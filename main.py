from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackDataFilter

from auth_data import token, admin_id
from Class import UserStates, UserPhoto, GameCheck, DeleteGame
from InlinekeyboardButtons import ikb, PhotoIkb, BaseIkb, AskIkb, PhotoBackIkb
from date_parser import get_date

import json

bot = Bot(token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
callback_data = CallbackDataFilter("callback_type", "callback_value")

check = 0
null = 0
game_base = []
n = []
user_game_base = []
len_list = 0

with open('all_users.json', encoding='utf-8') as file:
    Data = json.load(file)

with open('all_sales.json', encoding='utf-8') as file:
    Data2 = json.load(file)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = ['–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫–∏–¥–æ–∫ üîç', '–í–∞—à —Å–ø–∏—Å–æ–∫ üìã']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)
    await bot.send_message(message.from_user.id, text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ —è "
                                                      "–±—É–¥—É –æ—Å—Ç–ª–µ–∂–∏–≤–∞—Ç—å –µ–µ —Ü–µ–Ω—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å, "
                                                      "—à–µ—Ñ ü´°\n\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - /help",
                           reply_markup=keyboard)


@dp.message_handler(commands='help')
async def get_help(message: types.Message):
    await bot.send_message(message.from_user.id,
                           "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n"
                           "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
                           "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                           "/feedback - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
                           "/watcher - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä—ã\n"
                           "/list - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä\n"
                           )


@dp.message_handler(commands='feedback')
async def feedback(message: types.Message):
    await bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å', reply_markup=ikb)


@dp.callback_query_handler(lambda query: query.data == "Error", state='*')
async def callback_error(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(chat_id=callback_query.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –¥–ª—è –µ–µ —Å–∫–æ—Ä–µ–π—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è! üö´')
    await UserStates.step1.set()
    await state.update_data({'UserStates': 'step1'})


@dp.callback_query_handler(lambda query: query.data == "Idea", state='*')
async def callback_idea(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(chat_id=callback_query.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–≤–æ—é –∏–¥–µ—é, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–±–¥—É–º–∞—Ç—å –µ–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ '
                                '–≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤ –±–æ—Ç–µ! üí°')
    await UserStates.step1.set()
    await state.update_data({'UserStates': 'step1'})


@dp.message_handler(state=UserStates.step1)
async def get_feedback_step2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['step1'] = message.text
        user_info = data.get('step1') + '\n'

    await bot.send_message(chat_id=admin_id, text=f'–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '
                                                  f'{message.from_user.full_name}'
                                                  f'(@{message.from_user.username}):\n{user_info}')
    await bot.send_message(chat_id=message.from_user.id, text='–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π?',
                           reply_markup=PhotoIkb)
    await UserStates.step2.set()
    await state.update_data({'UserStates': 'step2', 'step1_data': user_info})


@dp.callback_query_handler(lambda query: query.data == "yes", state='*')
async def callback_yes_photo(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text='–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üåÖ', reply_markup=PhotoBackIkb)
    await UserPhoto.photo1.set()
    await state.update_data({'UserPhoto': 'photo1'})


@dp.callback_query_handler(lambda query: query.data == "back_img", state='*')
async def back_image(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    await bot.send_message(chat_id=callback_query.from_user.id, text='–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '
                                                                     '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π?', reply_markup=PhotoIkb)
    await UserStates.step2.set()
    await state.update_data({'UserStates': 'step2'})


@dp.callback_query_handler(lambda query: query.data == "no", state='*')
async def callback_no_photo(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏, "
                                                             "—ç—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –±—ã—Å—Ç—Ä–æ–º—É —Ä–µ—à–µ–Ω–∏—é! ‚ù§Ô∏è")
    await state.finish()


@dp.message_handler(state=UserPhoto.photo1, content_types=['photo'])
async def process_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo1_data'] = message.photo[-1].file_id
        user_photo = data.get('photo1_data')
        await bot.send_photo(chat_id=admin_id, photo=user_photo, caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} "
                                                                         f"(@{message.from_user.username})"
                                                                         f" –¥–æ–ø–æ–ª–Ω–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π")

    await bot.send_message(chat_id=message.chat.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏, "
                                                         "—ç—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –±—ã—Å—Ç—Ä–æ–º—É —Ä–µ—à–µ–Ω–∏—é! ‚ù§Ô∏è")
    await state.finish()


@dp.message_handler(lambda message: message.text == "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫–∏–¥–æ–∫ üîç")
@dp.message_handler(commands='watcher')
async def discount_hunter(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∏–≥—Ä—ã üéÆ')
    await GameCheck.name.set()
    await state.update_data({'GameCheck': 'name'})


@dp.message_handler(state=GameCheck.name)
async def name_handler(message: types.Message, state: FSMContext):
    global check, price, discount, sale, link

    async with state.proxy() as data:
        data['name'] = message.text
        user_game = data.get('name')
        n.append(user_game)

    for name in Data2:
        if name.get("full_name") == user_game:
            check = 1
            price = name.get("price_orig")
            discount = name.get("sale")
            sale = name.get("price_sale")
            link = name.get("link")

            break
        else:
            check = 0

    if check == 1:
        await bot.send_message(message.from_user.id,
                               text=f'<a href="{link}">{user_game}</a> —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ!üî•\n–ï–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è '
                                    f'—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞ <s>{price}</s>, –∞ —Å '
                                    f'—É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ {discount}, '
                                    f'–µ–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <i>{sale}</i>.üìâ –°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ '
                                    f'{get_date(link)} ‚è≥\n–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ '
                                    f'–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?', reply_markup=BaseIkb
                               )
        await state.finish()
    elif check == 0:
        await bot.send_message(message.from_user.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –≤–∞—Å –∏–≥—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ —Ä–∞–∑–¥–µ–ª–∞ "
                                                          "—Å–∫–∏–¥–æ–∫. üòì –í—ã —Ö–æ—Ç–∏—Ç–µ –µ–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ "
                                                          "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?", reply_markup=BaseIkb)
        await state.finish()


@dp.callback_query_handler(lambda query: query.data == "back_base")
async def back_base(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∏–≥—Ä—ã üéÆ')
    await GameCheck.name.set()
    await state.update_data({'GameCheck': 'name'})


@dp.callback_query_handler(lambda query: query.data == "base_yes")
async def add_to_base(callback_query: types.CallbackQuery):
    for user in Data:
        if user.get("id") == callback_query.from_user.id and user.get("game") == n[0]:
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await bot.send_message(callback_query.from_user.id, text="–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –∏–≥—Ä—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, "
                                                                     "–≤—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –µ–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑?",
                                   reply_markup=AskIkb)
            break
        else:
            Data.append({'id': callback_query.from_user.id, 'game': n[0]})
            with open("all_users.json", "w", encoding="utf-8") as file1:
                json.dump(Data, file1, indent=4, ensure_ascii=False)
            n.clear()
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            await bot.send_message(callback_query.from_user.id,
                                   text=f'–û—Ç–ª–∏—á–Ω–æ, –∏–≥—Ä–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫. –ñ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üíã\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ '
                                        f'—É–≤–∏–¥–µ—Ç—å '
                                        f'—Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∏–≥—Ä, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: /list')


@dp.callback_query_handler(lambda query: query.data == "base_no")
async def delete_from_base(callback_query: types.CallbackQuery):
    n.clear()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text='–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã –≤—Å–µ-—Ç–∞–∫–∏ —Ä–µ—à–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ '
                                                             '—É—Å–ª—É–≥–∞–º–∏! ‚ò∫Ô∏è')


@dp.callback_query_handler(lambda query: query.data == "ask_yes")
async def check_user_game_yes(callback_query: types.CallbackQuery):
    Data.append({'id': callback_query.from_user.id, 'game': n[0]})
    with open("all_users.json", "w", encoding="utf-8") as file1:
        json.dump(Data, file1, indent=4, ensure_ascii=False)

    n.clear()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id,
                           text=f'–û—Ç–ª–∏—á–Ω–æ, –∏–≥—Ä–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫. –ñ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üíã\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ '
                                f'—É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∏–≥—Ä, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: /list')


@dp.callback_query_handler(lambda query: query.data == "ask_no")
async def check_user_game_no(callback_query: types.CallbackQuery):
    n.clear()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text='–¢–æ–≥–¥–∞ –º—ã –∂–¥–µ–º –æ—Ç –≤–∞—Å –¥—Ä—É–≥—É—é –∏–≥—Ä—É! ‚ò∫Ô∏è –í—ã –º–æ–∂–µ—Ç–µ '
                                                             '–ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /list, '
                                                             '–∞ —Ç–∞–∫ –∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /watcher.')


@dp.message_handler(lambda message: message.text == "–í–∞—à —Å–ø–∏—Å–æ–∫ üìã")
@dp.message_handler(commands='list')
async def game_list(message: types.Message, a=1, b=0, msg_list=f'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –∏–≥—Ä: \n'):
    for games in Data:
        if games.get("id") == message.from_user.id:
            user_game_base.append(f'‚Ññ{a} {games.get("game")}')
            a += 1

    for count_game in range(len(user_game_base)):
        msg_list = msg_list + f"{user_game_base[b]} \n"
        b += 1

    if len(user_game_base) == 0:
        await bot.send_message(message.from_user.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à —Å–ø–∏—Å–æ–∫ –µ—â–µ –ø—É—Å—Ç, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∏–≥—Ä–∞–º–∏ "
                                                          "–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /watcher üìù")
    else:
        await bot.send_message(message.from_user.id, text=msg_list)
        user_game_base.clear()


@dp.message_handler(commands='delete')
async def delete_from_list(message: types.Message, state: FSMContext, a=1, b=0, msg_list=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '
                                                                      f'–∏–∑ —Å–ø–∏—Å–∫–∞: üóë \n'):
    for games in Data:
        if games.get("id") == message.from_user.id:
            user_game_base.append(f'‚Ññ{a} {games.get("game")}')
            a += 1

    for count_game in range(len(user_game_base)):
        msg_list = msg_list + f"{user_game_base[b]} \n"
        b += 1

    if len(user_game_base) == 0:
        await bot.send_message(message.from_user.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à —Å–ø–∏—Å–æ–∫ –µ—â–µ –ø—É—Å—Ç, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∏–≥—Ä–∞–º–∏ "
                                                          "–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /watcher üìù")
    else:
        await bot.send_message(message.from_user.id, text=msg_list)

    await DeleteGame.number.set()
    await state.update_data({'DeleteGame': 'number'})

@dp.message_handler(state=DeleteGame.number)
async def delete_process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = message.text
        number = data.get("number")
    Data.remove({'id': message.from_user.id, 'game': user_game_base[int(number)]})
    with open("all_users.json", "w", encoding="utf-8") as file1:
        json.dump(Data, file1, indent=4, ensure_ascii=False)

    user_game_base.clear()

    await state.finish()


@dp.message_handler(commands='send')
async def mailing(message: types.Message):
    if message.from_user.id == 1127824573:
        for users in Data:
            for games in Data2:
                if users.get("game") == games.get("full_name"):
                    game = users.get("game")
                    price = games.get("price_orig")
                    discount = games.get("sale")
                    sale = games.get("price_sale")
                    link = games.get("link")
                    date = get_date(link)
                    await bot.send_message(users.get("id"), text=f'<a href="{link}">{game}</a> –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ '
                                                                 f'—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ!üî•\n–ï–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è '
                                                                 f'—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞ <s>{price}</s>, –∞ —Å '
                                                                 f'—É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ {discount}, '
                                                                 f'–µ–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <i>{sale}</i>.üìâ –°–∫–∏–¥–∫–∞ '
                                                                 f'–±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {date} ‚è≥')
                    break


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
